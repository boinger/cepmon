# vim:syntax=ruby
# "metric" events have attributes:  name, host, cluster, value

require "yaml"

amqp_config = YAML.load(
                File.read(File.join(File.dirname(__FILE__), "amqp.yaml"))
)

amqp_input amqp_config

def threshold(metric, passed_opts = {})
  opts = {
    :level => :host,  # :cluster or :host
    :threshold => 0,
    :average_over => "5 min",
    :operator => nil,
  }.merge(passed_opts)

  case opts[:operator]
  when '>', '<', '>=', '<=', '='
    true # ok
  else
    raise "unknown :operator (#{opts[:operator]})"
  end

  metric_safe = metric.tr('.', '_')
  case opts[:level]
  when :cluster
    group_by = "name, cluster"
    select = "name, cluster"
  when :host
    group_by = "name, cluster, host"
    select = "name, host, cluster"
  else
    raise "unknown :level (#{opts[:level]})"
  end

  md = opts
  md[:name] = metric

  statement :name => statement_name(metric_safe),
            :epl  => "select average as value, cluster, host " +
                     "from metric(name='#{metric}')." +
                     "std:groupwin(#{group_by})." +
                     "win:time(#{opts[:average_over]})." +
                     "stat:uni(value, #{group_by}) " +
                     "group by #{group_by} " +
                     "having average > #{opts[:threshold]} " +
                     "output first every 90 seconds",
            :metadata => md
end

threshold('stats.logstash.zeus.sync.response.503',
       :operator => '>',
       :threshold => 0.5,
       :units => '503s/second',
       :average_over => "1 min",
       :level => :host
      )

threshold('stats.timers.logstash.zeus.sync.node_time.upper_90',
       :operator => '>',
       :threshold => 1.5,
       :units => 'seconds',
       :average_over => "3 min",
       :level => :host
      )
