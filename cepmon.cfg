# vim:syntax=ruby
# "metric" events have attributes:  name, host, cluster, value

amqp_input :host => "localhost",
           :user => "guest",
           :password => "guest",
           :vhost => "/",
           :name => "stats",
           :type => "exchange"

statement :name => "00_metric_host",
          :epl => "insert into metric_host select name, host, cluster, avg(value) as value from metric.win:time(1 minute) group by name, host, cluster",
          :listen => true

statement :name => "01_metric_cluster_avg",
          :epl => "insert into metric_cluster_avg select name, cluster, avg(value) as value from metric_host.win:time_batch(1 minute) group by name, cluster",
          :listen => true

# keep a running 5 minute average for the cluster-level value, update every 3 minutes

OUTLIER_FACTOR = 2.5

def sla_gt(metric, passed_opts = {})
  opts = {
    :level => :cluster,  # :cluster or :host
    :threshold => 0,
    :average_over => "5 min",
  }.merge(passed_opts)

  case opts[:level]
  when :cluster
    from = "metric_cluster_avg"
    group_by = "name, cluster"
  when :host
    from = "metric_host"
    group_by = "name, cluster, host"
  else
    raise "unknown :level (#{opts[:level]})"
  end

  metric_safe = metric.gsub('.', '_')
  statement :name => "10_alerts_cluster_sla_gt_#{metric_safe}",
            :epl  => "select name, cluster, avg(value) as value, #{opts[:threshold]} as threshold from #{from}(name='#{metric}').win:time(#{opts[:average_over]}) group by #{group_by} having avg(value) > #{opts[:threshold]}",
            :listen => true
  #statement :name => "10_tracking_cluster_sla_gt_#{metric_safe}",
  #          :epl  => "insert into cluster_sla_gt_#{metric_safe} select name, cluster, avg(value) as value from metric_cluster_sum(name='#{metric}').win:time(1 min) group by name, cluster",
  #          :listen => true
end

sla_gt('browserid.stats.verifier.verify_time.mean', :threshold => 20, :average_over => "3 min", :level => :host)
