# vim:syntax=ruby
# "metric" events have attributes:  name, host, cluster, value

amqp_input :host => "localhost",
           :user => "guest",
           :password => "guest",
           :vhost => "/",
           :name => "stats",
           :type => "exchange"

# keep a running 5 minute average, update every 3 minutes
statement :name => "00_metric_avg_5_host",
          :epl => "insert into metric_avg_5_host select name, host, cluster, avg(value) as value, stddev(value) as stddev from metric.win:time_batch(3 minutes) group by name, host, cluster",
          :listen => false

# keep a running 5 minute average for the cluster-level value, update every 3 minutes
statement :name => "00_metric_agg_cluster",
          :epl => "insert into metric_cluster select name, cluster, sum(value) as value from metric.win:length(1) group by name, cluster",
          :listen => false

statement :name => "01_metric_avg_5_cluster",
          :epl => "insert into metric_avg_5_cluster select name, cluster, avg(value) as value, stddev(value) as stddev from metric_cluster.win:time_batch(3 minutes) group by name, cluster",
          :listen => false

ALPHA = 0.5
BETA = 0.5
OUTLIER_FACTOR = 3.0

def forecast(metric)
  metric_safe = metric.gsub('.', '_')
  # prediction tracking (host level)
  statement :name => "10_predict_tracking_host_#{metric}",
            :epl => "insert into metric_predictions_host_#{metric_safe} select metric.name as name, metric.value as value, metric.cluster as cluster, metric.host as host, predict.forecast as forecast, predict.deviation as deviation, predict.lastRaw + #{OUTLIER_FACTOR} * predict.deviation as upper_bound, predict.lastRaw - #{OUTLIER_FACTOR} * predict.deviation as lower_bound from metric_avg_5_host(name = '#{metric}').cepmon:predict(value, #{ALPHA}, #{BETA}) as predict, metric_avg_5_host(name='#{metric}').win:length(1) as metric",
            :listen => false

  # prediction tracking (cluster level)
  statement :name => "10_predict_tracking_cluster_#{metric}",
            :epl => "insert into metric_predictions_cluster_#{metric_safe} select metric.name as name, metric.value as value, metric.cluster as cluster, predict.forecast as forecast, predict.deviation as deviation, predict.lastRaw + #{OUTLIER_FACTOR} * predict.deviation as upper_bound, predict.lastRaw - #{OUTLIER_FACTOR} * predict.deviation as lower_bound from metric_avg_5_cluster(name='#{metric}').cepmon:predict(value, #{ALPHA}, #{BETA}) as predict, metric_avg_5_cluster(name='#{metric}').win:length(1) as metric group by metric.name, metric.cluster",
            :listen => false

  # host forecast alerts
  statement :name => "20_forecast_alerting_host_#{metric}",
            :epl => "select name, host, cluster, value, upper_bound, lower_bound, deviation from metric_predictions_host_#{metric_safe}.win:length(1) where upper_bound != lower_bound having (value > upper_bound or value < lower_bound) and (upper_bound - lower_bound < deviation)"

  # cluster forecast alerts
  statement :name => "20_forecast_alerting_cluster_#{metric}",
            :epl => "select name, cluster, value, upper_bound, lower_bound from metric_predictions_cluster_#{metric_safe}.win:length(1) where upper_bound != lower_bound having (value > upper_bound or value < lower_bound) and (upper_bound - lower_bound < deviation)"
end

forecast('mysql.qps')
forecast('system.load.10')
forecast('syncstorage.request_rate.200')
forecast('syncstorage.log.exception')
